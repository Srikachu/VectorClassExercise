# -*- coding: utf-8 -*-
"""vectore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VuDGwcZwR_M8O4WhsK70QWc-2ZxyUtnK
"""

import numpy as np
import random as rd
import math
class Vector:
  def __init__(self,i,j,k):
    self.i=i
    self.j=j
    self.k=k
  def crossProduct(self, vector2):
    result=(self.i*vector2.k-self.k*vector2.j)
    result-=(self.i*vector2.k-self.k*vector2.i)
    result+=(self.i*vector2.j-self.j*vector2.i)
    return result
  def printVector(self):
     print("{}i + {}j + {}k".format(self.i,self.j,self.k))
  def crossProduct(self, vector2):
    result=(self.i*vector2.k-self.k*vector2.j)
    result-=(self.i*vector2.k-self.k*vector2.i)
    result+=(self.i*vector2.j-self.j*vector2.i)
    return result
  def dotProduct(self, vector2):
    result=self.i*vector2.i
    result+=self.j*vector2.j
    result+=self.k*vector2.k
    return result
  def magnitude(self):
    result=self.i**2
    result+=self.j**2
    result+=self.k**2
    return  math.pow(result, (1/2))
  def scalarProduct(self, scalar):
    self.i*=scalar
    self.j*=scalar
    self.k*=scalar
a=Vector(np.floor(rd.random()*10), np.floor(rd.random()*10), np.floor(rd.random()*10))
b=Vector(np.floor(rd.random()*10), np.floor(rd.random()*10), np.floor(rd.random()*10))

print("Vector class: applies vector magnitude, cross product, dot product, and scalar product, when both are random numbers")

scalar=rd.randrange(11)
print("Escalar= {}".format(scalar))

print("Vector a: ")
a.printVector()
result=a.magnitude()
print("Magnitude= {}".format(result))
print("Vector b: ") 
b.printVector()
result=b.magnitude()
print("Magnitude= {}".format(result))

result=a.dotProduct(b)
print("Producto punto a*b={}".format(result))
result=a.crossProduct(b)
print("Producto punto axb={}".format(result))
a.scalarProduct(scalar)
b.scalarProduct(scalar)
print("Vector a*{}: ".format(scalar))
a.printVector()
print("Vector b*{}: ".format(scalar))
b.printVector()